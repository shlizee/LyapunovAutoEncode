 
  
 ''The Art of Computer Programming'' (''TAOCP'') is a comprehensive monograph written by computer scientist Donald Knuth that covers many kinds of Computer programming|programming algorithms and analysis of algorithms|their analysis. 
 
 Knuth began the project, originally conceived as a single book with twelve chapters, in 1962. The first three volumes of what was then expected to be a seven-volume set were published in 1968, 1969, and 1973. Work began in earnest on Volume 4 in 1973, but was suspended in 1977 for work on typesetting. Writing of the final copy of Volume 4A began in longhand in 2001, and the first online pre-fascicle, 2A, appeared later in 2001.  [ note for box 3, folder 1]   The first published installment of Volume 4 appeared in paperback as Fascicle (book)|Fascicle 2 in 2005. 
 The hardback Volume 4A, combining Volume 4, Fascicles 0–4, was published in 2011. Volume 4, Fascicle 6 ( " Satisfiability " ) was released in December 2015; Volume 4, Fascicle 5 ( " Mathematical Preliminaries Redux; Backtracking; Dancing Links " ) was released in November 2019. 
 
 Fascicles 5 and 6 are expected to make up the first two-thirds of Volume 4B.  Knuth has not announced any estimated date for release of Volume 4B, although his method used for Volume 4A is to release the hardback volume sometime after release of the paperback fascicles contained in it.  Near-term publisher estimates put the release date at May or June of 2019, which proved to be incorrect.  [ Addison-Wesley Pearson webpage]   [ Pearson Educational]  
 
 ==History== 
 File:KnuthAtOpenContentAlliance.jpg|right|thumb|200px|Donald Knuth in 2005 
 
 After winning a Westinghouse Talent Search scholarship, Knuth enrolled at the Case Institute of Technology (now Case Western Reserve University), where his performance was so outstanding that the faculty voted to award him a master of science upon his completion of the baccalaureate degree. During his summer vacations, Knuth was hired by the Burroughs Corporation to write compilers, earning more in his summer months than full professors did for an entire year.     Such exploits made Knuth a topic of discussion among the mathematics department, which included Richard S. Varga. 
 
 In January 1962, when he was a graduate student in the mathematics department at Caltech, Knuth was approached by Addison-Wesley to write a book about compiler design, and he proposed a larger scope. He came up with a list of 12 chapter titles the same day. In the summer of 1962 he worked on a FORTRAN compiler for UNIVAC. During this time, he also came up with a mathematical analysis of linear probing, which convinced him to present the material with a quantitative approach. After receiving his PhD in June 1963, he began working on his manuscript, of which he finished his first draft in June 1965, at  hand-written pages.  Donald Knuth, [ ''This Week's Citation Classic''], Current Contents, Number 34 (August 23, 1993), page 8.   He had assumed that about five hand-written pages would translate into one printed page, but his publisher said instead that about  hand-written pages translated to one printed page. This meant he had approximately  printed pages of material, which closely matches the size of the first three published volumes. The publisher was nervous about accepting such a project from a graduate student. At this point, Knuth received support from Richard S. Varga, who was the scientific adviser to the publisher. Varga was visiting Olga Taussky-Todd and John Todd (computer scientist)|John Todd at Caltech. With Varga's enthusiastic endorsement, the publisher accepted Knuth's expanded plans. In its expanded version, the book would be published in seven volumes, each with just one or two chapters.  
    Due to the growth in the material, the plan for Volume 4 has since expanded to include Volumes 4A, 4B, 4C, 4D, and possibly more. 
 
 In 1976, Knuth prepared a second edition of Volume 2, requiring it to be typesetting|typeset again, but the style of type used in the first edition (called Hot metal typesetting|hot type) was no longer available. In 1977, he decided to spend some time creating something more suitable. Eight years later, he returned with TeX|T  E  X, which is currently used for all volumes. 
 
 The offer of a so-called Knuth reward check worth  " one hexadecimal dollar "  (100  Hexadecimal|HEX   hexadecimal|base 16 cents, in decimal, is $2.56) for any errors found, and the correction of these errors in subsequent printings, has contributed to the highly polished and still-authoritative nature of the work, long after its first publication. Another characteristic of the volumes is the variation in the difficulty of the exercises. Knuth even has a numerical difficulty scale for rating those exercises, varying from 0 to 50, where 0 is trivial, and 50 is an open question in contemporary research.     
 
 Knuth's dedication reads: 
 
  This series of books is affectionately dedicated  to the IBM 650|Type 650 computer once installed at  Case Institute of Technology,  with whom I have spent many pleasant evenings.  The dedication was worded slightly differently in the first edition.   
 
 ==Assembly language in the book== 
 All examples in the books use a language called  " MIX assembly language " , which runs on the hypothetical MIX computer. Currently, the MIX computer is being replaced by the MMIX computer, which is a RISC version. Software such as GNU MDK exists to provide emulation of the MIX architecture. Knuth considers the use of assembly language necessary for the speed and memory usage of algorithms to be judged. 
 
 ==Critical response== 
 Knuth was awarded the 1974 Turing Award  " for his major contributions to the analysis of algorithms […], and in particular for his contributions to the 'art of computer programming' through his well-known books in a continuous series by this title. "     ''American Scientist'' has included this work among  " 100 or so Books that shaped a Century of Science " , referring to the twentieth century,     and within the computer science community it is regarded as the first and still the best comprehensive treatment of its subject. Covers of the third edition of Volume 1 quote Bill Gates as saying,  " If you think you're a really good programmer… read (Knuth's) ''Art of Computer Programming''… You should definitely send me a résumé if you can read the whole thing. "     According to folklore.org, Steve Jobs actually made the incredible claim. 
 [ & story=Close_Encounters_of_the_Steve_Kind.txt]   comment out & nbsp;– the reference only says that Steve Jobs read the books, not that he said the quote about the resume. -- >  ''The New York Times'' referred to it as  " the profession's defining treatise " .    
 
 ==Volumes== 
 ===Completed=== 
 *Volume 1 & nbsp;– Fundamental Algorithms 
 :*Chapter 1 & nbsp;– Basic concepts 
 :*Chapter 2 & nbsp;– Information data structure|structures 
 *Volume 2 & nbsp;– Seminumerical Algorithms 
 :*Chapter 3 & nbsp;– Statistical randomness|Random numbers 
 :*Chapter 4 & nbsp;– Arithmetic 
 *Volume 3 & nbsp;– Sorting algorithm|Sorting and Search algorithm|Searching 
 :*Chapter 5 & nbsp;– Sorting algorithm|Sorting 
 :*Chapter 6 & nbsp;– Search algorithm|Searching 
 *Volume 4A & nbsp;– combinatorics|Combinatorial Algorithms 
 :*Chapter 7 & nbsp;– Combinatorial searching (part 1) 
 
 ===Planned=== 
 *Volume 4B... & nbsp;– Combinatorial Algorithms (chapters 7  &  8 released in several subvolumes) 
 :*Chapter 7 & nbsp;– Combinatorial searching (continued) 
 :*Chapter 8 & nbsp;– Recursion 
 *Volume 5 & nbsp;– Syntactic Algorithms (, estimated for release in 2025) 
 :*Chapter 9 & nbsp;– Lexical analysis|Lexical scanning (also includes String searching algorithm|string search and data compression) 
 :*Chapter 10 & nbsp;– Parsing techniques 
 *Volume 6 & nbsp;– The Theory of Context-free language|Context-Free Languages 
 *Volume 7 & nbsp;– Compiler Techniques 
 
 ==Chapter outlines== 
 ===Completed=== 
 ====Volume 1 & nbsp;– Fundamental Algorithms==== 
 *Chapter 1 & nbsp;– Basic concepts 
 **1.1. Algorithms 
 **1.2. Mathematical Preliminaries 
 ***1.2.1. Mathematical induction|Mathematical Induction 
 ***1.2.2. Numbers, Powers, and Logarithms 
 ***1.2.3. Sums and Products 
 ***1.2.4. Integer Functions and Elementary Number Theory 
 ***1.2.5. Permutations and Factorials 
 ***1.2.6. Binomial coefficient|Binomial Coefficients 
 ***1.2.7. Harmonic number|Harmonic Numbers 
 ***1.2.8. Fibonacci number|Fibonacci Numbers 
 ***1.2.9. Generating function|Generating Functions 
 ***1.2.10. Analysis of an Algorithm 
 ***1.2.11. Asymptotic analysis|Asymptotic Representations 
 ****1.2.11.1. The Big O notation|O-notation 
 ****1.2.11.2. Euler's summation formula 
 ****1.2.11.3. Some asymptotic calculations 
 **1.3 MMIX (MIX in the hardback copy but updated by fascicle 1) 
 ***1.3.1. Description of MMIX 
 ***1.3.2. The MMIX Assembly Language 
 ***1.3.3. Applications to Permutations 
 **1.4. Some Fundamental Programming Techniques 
 ***1.4.1. Subroutines 
 ***1.4.2. Coroutines 
 ***1.4.3. Interpretive Routines 
 ****1.4.3.1. A MIX simulator 
 ****1.4.3.2. Trace routines 
 ***1.4.4. Input and Output 
 ***1.4.5. History and Bibliography 
 *Chapter 2 & nbsp;– Information Structures 
 **2.1. Introduction 
 **2.2. Linear Lists 
 ***2.2.1. Stacks, Queues, and Deques 
 ***2.2.2. Sequential Allocation 
 ***2.2.3. Linked Allocation 
 ***2.2.4. Circular Lists 
 ***2.2.5. Doubly Linked Lists 
 ***2.2.6. Arrays and Orthogonal Lists 
 **2.3. Tree (data structure)|Trees 
 ***2.3.1. Traversing Binary Trees 
 ***2.3.2. Binary Tree Representation of Trees 
 ***2.3.3. Other Representations of Trees 
 ***2.3.4. Basic Mathematical Properties of Trees 
 ****2.3.4.1. Free trees 
 ****2.3.4.2. Oriented trees 
 ****2.3.4.3. Kőnig's lemma|The  " infinity lemma "  
 ****2.3.4.4. Enumeration of trees 
 ****2.3.4.5. Path length 
 ****2.3.4.6. History and bibliography 
 ***2.3.5. Lists and Garbage Collection 
 **2.4. Multilinked Structures 
 **2.5. Dynamic memory allocation|Dynamic Storage Allocation 
 **2.6. History and Bibliography 
 
 ====Volume 2 & nbsp;– Seminumerical Algorithms==== 
 *Chapter 3 & nbsp;– Random Numbers 
 **3.1. Introduction 
 **3.2. Pseudo-random number generator|Generating Uniform Random Numbers 
 ***3.2.1. The Linear Congruential Method 
 ****3.2.1.1. Choice of modulus 
 ****3.2.1.2. Choice of multiplier 
 ****3.2.1.3. Potency 
 ***3.2.2. Other Methods 
 **3.3. Statistical Tests 
 ***3.3.1. General Test Procedures for Studying Random Data 
 ***3.3.2. Empirical Tests 
 ***3.3.3. Theoretical Tests 
 ***3.3.4. The Spectral Test 
 **3.4. Pseudo-random number sampling|Other Types of Random Quantities 
 ***3.4.1. Numerical Distributions 
 ***3.4.2. Random Sampling and Shuffling 
 **3.5. What Is a Random Sequence? 
 **3.6. Summary 
 *Chapter 4 & nbsp;– Arithmetic 
 **4.1. Positional notation|Positional Number Systems 
 **4.2. Floating point|Floating Point Arithmetic 
 ***4.2.1. Single-Precision Calculations 
 ***4.2.2. Accuracy of Floating Point Arithmetic 
 ***4.2.3. Double-Precision Calculations 
 ***4.2.4. Distribution of Floating Point Numbers 
 **4.3. Arbitrary-precision arithmetic|Multiple Precision Arithmetic 
 ***4.3.1. The Classical Algorithms 
 ***4.3.2. Modular Arithmetic 
 ***4.3.3. How Fast Can We Multiply? 
 **4.4. Radix Conversion 
 **4.5. Rational number|Rational Arithmetic 
 ***4.5.1. Fractions 
 ***4.5.2. The Greatest Common Divisor 
 ***4.5.3. Analysis of Euclidean algorithm|Euclid's Algorithm 
 ***4.5.4. Factoring into Primes 
 **4.6. Polynomial Arithmetic 
 ***4.6.1. Division of Polynomials 
 ***4.6.2. Factorization of Polynomials 
 ***4.6.3. Evaluation of Powers 
 ***4.6.4. Evaluation of Polynomials 
 **4.7. Manipulation of Power Series 
 
 ====Volume 3 & nbsp;– Sorting and Searching==== 
 *Chapter 5 & nbsp;– Sorting algorithm|Sorting 
 **5.1. Combinatorial Properties of Permutations 
 ***5.1.1. Inversions 
 ***5.1.2. Permutations of a Multiset 
 ***5.1.3. Runs 
 ***5.1.4. Tableaux and Involutions 
 **5.2. Internal sorting 
 ***5.2.1. Sorting by Insertion 
 ***5.2.2. Sorting by Exchanging 
 ***5.2.3. Sorting by Selection 
 ***5.2.4. Sorting by Merging 
 ***5.2.5. Sorting by Distribution 
 **5.3. Optimum Sorting 
 ***5.3.1. Minimum-Comparison Sorting 
 ***5.3.2. Minimum-Comparison Merging 
 ***5.3.3. Minimum-Comparison Selection 
 ***5.3.4. Networks for Sorting 
 **5.4. External Sorting 
 ***5.4.1. Multiway Merging and Replacement Selection 
 ***5.4.2. The Polyphase Merge 
 ***5.4.3. The Cascade Merge 
 ***5.4.4. Reading Tape Backwards 
 ***5.4.5. The Oscillating Sort 
 ***5.4.6. Practical Considerations for Tape Merging 
 ***5.4.7. External Radix Sorting 
 ***5.4.8. Two-Tape Sorting 
 ***5.4.9. Disks and Drums 
 **5.5. Summary, History, and Bibliography 
 *Chapter 6 & nbsp;– Search algorithm|Searching 
 **6.1. Sequential Searching 
 **6.2. Searching by Comparison of Unique key|Keys 
 ***6.2.1. Searching an Ordered Table 
 ***6.2.2. Binary Tree Searching 
 ***6.2.3. Balanced Trees 
 ***6.2.4. Multiway Trees 
 **6.3. Digital Searching 
 **6.4. Hash table|Hashing 
 **6.5. Retrieval on Secondary Keys 
 
 ====Volume 4A & nbsp;– Combinatorial Algorithms, Part 1==== 
 *Chapter 7 & nbsp;– Combinatorial Searching 
 **7.1. Binary numeral system|Zeros and Ones 
 ***7.1.1. Two-element Boolean algebra|Boolean Basics 
 ***7.1.2. Boolean Evaluation 
 ***7.1.3. Bitwise operation|Bitwise Tricks and Techniques 
 ***7.1.4. Binary decision diagram|Binary Decision Diagrams 
 **7.2. Generating All Possibilities 
 ***7.2.1. Generating Basic Combinatorial Patterns 
 ****7.2.1.1. Generating all n-tuples 
 ****7.2.1.2. Generating all permutations 
 ****7.2.1.3. Generating all combinations 
 ****7.2.1.4. Generating all Partition (number theory)|partitions 
 ****7.2.1.5. Generating all Partition of a set|set partitions 
 ****7.2.1.6. Generating all tree (graph theory)|trees 
 ****7.2.1.7. History and further references 
 
 ===Planned=== 
 ====Volume 4B, 4C, 4D – Combinatorial Algorithms==== 
 *Chapter 7 & nbsp;– Combinatorial Searching (continued) 
 **7.2. Generating all possibilities (continued) 
 ***7.2.2. Backtracking|Backtrack programming (published in Fascicle 5) 
 ****7.2.2.1. Dancing links (published in Fascicle 5) 
 ****7.2.2.2. Satisfiability (published in Fascicle 6) 
 ****7.2.2.3. Constraint Satisfaction Problem|Constraint satisfaction 
 ****7.2.2.4. Hamiltonian path problem|Hamiltonian paths (online draft in pre-fascicle 8A) 
 ****7.2.2.5. Clique problem|Cliques 
 ****7.2.2.6. Covers (Vertex cover, Set cover problem, Exact cover, Clique cover) 
 ****7.2.2.7. Squares 
 ****7.2.2.8. A potpourri of puzzles (online draft in pre-fascicle 9B) 
 ****7.2.2.9. Estimating backtrack costs (chapter 6 of  " Selected Papers on Analysis of Algorithms " , and pre-fascicle 5b in Section 7.2.2 under the heading  " Running time estimates " ) 
 ***7.2.3. Generating inequivalent patterns (includes discussion of Pólya enumeration theorem) 
 **7.3. Shortest path problem|Shortest paths 
 **7.4. Graph algorithms 
 ***7.4.1. Components and traversal 
 ***7.4.2. Special classes of graphs 
 ***7.4.3. Expander graphs 
 ***7.4.4. Random graphs 
 **7.5. Network algorithms 
 ***7.5.1. Transversal (combinatorics)|Distinct representatives 
 ***7.5.2. Assignment problem|The assignment problem 
 ***7.5.3. Network flow problem|Network flows 
 ***7.5.4. Optimum subtrees 
 ***7.5.5. Optimum matching 
 ***7.5.6. Optimum orderings 
 **7.6. Independence theory 
 ***7.6.1. Independence structures 
 ***7.6.2. Efficient matroid algorithms 
 **7.7. Discrete dynamic programming (see also Transfer-matrix method) 
 **7.8. Branch-and-bound techniques 
 **7.9. Herculean tasks (aka NP-hard problems) 
 **7.10. Approximation algorithm|Near-optimization 
 *Chapter 8 & nbsp;– Recursion (chapter 22 of  " Selected Papers on Analysis of Algorithms " ) 
 
 ====Volume 5 & nbsp;– Syntactic Algorithms==== 
 '', estimated for release in 2025'' 
 *Chapter 9 & nbsp;– Lexical analysis|Lexical scanning (includes also string search and data compression) 
 *Chapter 10 & nbsp;– Parsing techniques 
 
 ====Volume 6 & nbsp;– The Theory of Context-free Languages    ==== 
 ====Volume 7 & nbsp;– Compiler Techniques==== 
 
 ==English editions== 
 
 ===Current editions=== 
 These are the current editions in order by volume number: 
 * ''The Art of Computer Programming, Volumes 1-4A Boxed Set''. Third Edition (Reading, Massachusetts: Addison-Wesley, 2011), 3168pp.  
 ** ''Volume 1: Fundamental Algorithms''. Third Edition (Reading, Massachusetts: Addison-Wesley, 1997), xx+650pp. . Errata: [ (2011-01-08), [ (2020-03-26, 27th printing run|printing). Addenda: [ (2011). 
 ** ''Volume 2: Seminumerical Algorithms''. Third Edition (Reading, Massachusetts: Addison-Wesley, 1997), xiv+762pp. . Errata: [ (2011-01-08), [ (2020-03-26, 26th printing). Addenda: [ (2011). 
 ** ''Volume 3: Sorting and Searching''. Second Edition (Reading, Massachusetts: Addison-Wesley, 1998), xiv+780pp.+foldout. . Errata: [ (2011-01-08), [ (2020-03-26, 27th printing). Addenda: [ (2011). 
 ** ''Volume 4A: Combinatorial Algorithms, Part 1''. First Edition (Reading, Massachusetts: Addison-Wesley, 2011), xv+883pp. . Errata: [ (2020-03-26, ? printing). 
 * ''Volume 1, Fascicle 1: MMIX & nbsp;– A RISC Computer for the New Millennium''. (Addison-Wesley, 2005-02-14) . Errata: [ (2020-03-16) (will be in the fourth edition of volume 1)  
 * ''Volume 4, Fascicle 5: Mathematical Preliminaries Redux; Backtracking; Dancing Links''. (Addison-Wesley, 2019-11-22) xiii+382pp, . Errata: [ (2020-03-27) (will become part of volume 4B) 
 * ''Volume 4, Fascicle 6: Satisfiability''. (Addison-Wesley, 2015-12-08) xiii+310pp, . Errata: [ (2020-03-26) (will become part of volume 4B) 
 
 ===Previous editions=== 
 ====Complete volumes==== 
 These volumes were superseded by newer editions and are in order by date. 
 * ''Volume 1: Fundamental Algorithms''. First edition, 1968, xxi+634pp, .    
 * ''Volume 2: Seminumerical Algorithms''. First edition, 1969, xi+624pp, .  
 * ''Volume 3: Sorting and Searching''. First edition, 1973, xi+723pp+foldout, . Errata: [ 
 * ''Volume 1: Fundamental Algorithms''. Second edition, 1973, xxi+634pp, . Errata: [ 
 * ''Volume 2: Seminumerical Algorithms''. Second edition, 1981, xiii+ 688pp, . Errata: [ 
 * ''The Art of Computer Programming, Volumes 1-3 Boxed Set''. Second Edition (Reading, Massachusetts: Addison-Wesley, 1998), pp.  
 
 ====Fascicles==== 
 Volume & nbsp;4 fascicle (book)|fascicles 0–4 were revised and published as Volume & nbsp;4A: 
 * ''Volume 4, Fascicle 0: Introduction to Combinatorial Algorithms and Boolean Functions''. (Addison-Wesley Professional, 2008-04-28) vi+240pp, . Errata: [ (2011-01-01). 
 * ''Volume 4, Fascicle 1: Bitwise Tricks  &  Techniques; Binary Decision Diagrams''. (Addison-Wesley Professional, 2009-03-27) viii+260pp, . Errata: [ (2011-01-01). 
 * ''Volume 4, Fascicle 2: Generating All Tuples and Permutations''. (Addison-Wesley, 2005-02-14) v+127pp, . Errata: [ (2011-01-01). 
 * ''Volume 4, Fascicle 3: Generating All Combinations and Partitions''. (Addison-Wesley, 2005-07-26) vi+150pp, . Errata: [ (2011-01-01). 
 * ''Volume 4, Fascicle 4: Generating All Trees; History of Combinatorial Generation''. (Addison-Wesley, 2006-02-06) vi+120pp, . Errata: [ (2011-01-01). 
 
 Volume & nbsp;4 fascicles 5–6 will become part of Volume & nbsp;4B: 
 
 * ''Volume 4, Fascicle 5: Mathematical Preliminaries Redux; Backtracking; Dancing Links''. (Addison-Wesley, 2019-11-22) xiii+382pp, . Errata: [ (2020-03-27) 
 * ''Volume 4, Fascicle 6: Satisfiability''. (Addison-Wesley, 2015-12-08) xiii+310pp, . Errata: [ (2020-03-26) 
 
 ====Pre-fascicles==== 
 Volume & nbsp;4 pre-fascicles 5A, 5B, and 5C were revised and published as fascicle 5. 
 
 Volume & nbsp;4 pre-fascicle 6A was revised and published as fascicle 6. 
 
 * ''[ Volume 4, Pre-fascicle 8A: Hamiltonian Paths and Cycles]'' 
 * ''[ Volume 4, Pre-fascicle 9B: A Potpourri of Puzzles]'' 
 
 ==See also== 
 * ''Introduction to Algorithms'' 
 
 ==References== 
 Notes 
  
 
 Citations 
  
 
 Sources 
  
 *  
 *  
  
 
 ==External links== 
 *[ Overview of topics] (Knuth's personal homepage) 
 *[ Oral history interview with Donald E. Knuth] at Charles Babbage Institute, University of Minnesota, Minneapolis. Knuth discusses software patenting, structured programming, collaboration and his development of TeX. The oral history discusses the writing of ''The Art of Computer Programming''. 
 *[  " Robert W Floyd, In Memoriam " , by Donald E. Knuth] - (on the influence of Robert Floyd|Bob Floyd) 
 *[ ''TAoCP'' and its Influence of Computer Science (Softpanorama)] 
 
  
 
  
 Category:1968 non-fiction books 
 Category:Computer programming books 
 Category:Computer science books 
 Category:Monographs 
 Category:Books by Donald Knuth 
 Category:Analysis of algorithms 
 Category:Computer arithmetic algorithms 
 Category:American non-fiction books 
 Category:1969 non-fiction books 
 Category:1973 non-fiction books 
 Category:1981 non-fiction books 
 Category:2011 non-fiction books 
 Category:Addison-Wesley books